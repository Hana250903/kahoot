@{
    Layout = "~/Views/Shared/_Layout.cshtml";
    ViewData["Title"] = "Waiting Room";
}

<style>
    body {
        background: url('https://firebasestorage.googleapis.com/v0/b/imageuploadv3.appspot.com/o/TestFile%2F476804128_1010892111062884_2138589388959003989_n.jpg?alt=media&token=7456bb34-90f2-4cf0-9333-c7f2cf4f77ff') no-repeat center center fixed;
        background-size: cover;
    }

    .waiting-container {
        text-align: center;
        color: white;
        margin-top: 15%;
    }

    .spinner {
        border: 8px solid rgba(255, 255, 255, 0.2);
        border-top: 8px solid #fff;
        border-radius: 50%;
        width: 50px;
        height: 50px;
        animation: spin 1s linear infinite;
        display: inline-block;
    }

    @@keyframes spin {
        0% {
            transform: rotate(0deg);
        }

        100% {
            transform: rotate(360deg);
        }
    }
</style>

<div class="waiting-container">
    <h1 style="color: black;">Waiting for Host to Start...</h1>
    <h2 style="color: black;">Room Code: @Model.Code</h2>
    <div class="row" id="playersContainer">
        <!-- Danh sách người chơi sẽ được cập nhật qua SignalR -->
    </div>
    <div class="spinner"></div>
</div>

@section Scripts {
    <script src="~/js/microsoft/signalr/dist/browser/signalr.js"></script>
    <script>
            const code = "@Model.Code";
            const playerId = @Model.PlayerId;

            const connection = new signalR.HubConnectionBuilder()
                .withUrl("https://localhost:7252/gameHub")
                .withAutomaticReconnect()
                .build();

            function startConnection() {
                connection.start()
                    .then(() => {
                        console.log("Connected to SignalR server.");
                    connection.invoke("JoinRoom", code, playerId)
                            .then(() => console.log(`Player ${playerId} joined Room_${code} successfully`))
                            .catch(err => console.error("JoinRoom Error: ", err));
                    })
                    .catch(err => {
                        console.error("Connection Error: ", err);
                        setTimeout(startConnection, 2000); // Thử lại nếu lỗi
                    });
            }

            connection.on("QuizStarted", function (roomCode) {
                console.log("Quiz started for Room_" + roomCode);
                window.location.href = `/Game?code=${roomCode}&playerId=${playerId}`;
            });

            connection.onclose(() => {
                console.log("SignalR connection closed. Reconnecting...");
                startConnection();
            });

            connection.on("UpdatePlayers", function (players) {
            console.log("Received updated players:", players);
            updateTeamsUI(players);
            });

            function updateTeamsUI(players) {
            const container = document.getElementById("playersContainer");
                container.innerHTML = "";
                players.forEach(player => {
                    const playerDiv = document.createElement("div");
                    playerDiv.className = "col-md-3 mb-4";
                    playerDiv.innerHTML = `
                        <div class="card">
                            <div class="card-header bg-info text-white">${player.User.Username}</div>
                        </div>
                    `;
                    container.appendChild(playerDiv);
                });
            }

            startConnection();
    </script>
}