@{
    ViewData["Title"] = "Game";
    string code = ViewBag.Code ?? "";
    int playerId = ViewBag.PlayerId ?? 0;
}

<div class="container py-4">
    <div class="card shadow-sm">
        <div class="card-header bg-info text-white">
            <h1 class="h3 mb-0">Question</h1>
        </div>
        <div class="card-body">
            <div class="text-center mb-4">
                <h2 id="questionText">Waiting for question...</h2>
                <div id="timer" class="fw-bold text-danger fs-3"></div>
                <div id="correctAnswer" class="mt-3 text-success fw-bold" style="display: none;"></div>
            </div>

            <div class="row" id="answerOptions" style="display: none;">
                <div class="col-md-6 mb-3">
                    <button class="btn btn-outline-primary w-100 answer-btn" data-answer="1">
                        <strong>A.</strong> <span id="answerA"></span>
                    </button>
                </div>
                <div class="col-md-6 mb-3">
                    <button class="btn btn-outline-primary w-100 answer-btn" data-answer="2">
                        <strong>B.</strong> <span id="answerB"></span>
                    </button>
                </div>
                <div class="col-md-6 mb-3">
                    <button class="btn btn-outline-primary w-100 answer-btn" data-answer="3">
                        <strong>C.</strong> <span id="answerC"></span>
                    </button>
                </div>
                <div class="col-md-6 mb-3">
                    <button class="btn btn-outline-primary w-100 answer-btn" data-answer="4">
                        <strong>D.</strong> <span id="answerD"></span>
                    </button>
                </div>
            </div>

            <div class="text-center mt-4">
                <span id="status" class="text-muted"></span>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script src="~/js/microsoft/signalr/dist/browser/signalr.js"></script>
    <script>
            const connection = new signalR.HubConnectionBuilder()
                .withUrl("https://localhost:7252/gameHub")
                .withAutomaticReconnect()
                .build();

        let countdown;
        let currentOrder = 0;

        function startConnection() {
            connection.start()
                .then(() => {
                    console.log("Connected to SignalR server.");
                                let code = "@(code)";  // Nếu là chuỗi, cần bọc trong dấu nháy
                                let playerId = @(playerId);  // Nếu là số, có thể giữ nguyên
                                console.log(`Player ${playerId} joined Room_${code} successfully`);

                    if (code && playerId) {
                        connection.invoke("JoinRoom", code, playerId)
                            .then(() => console.log(`Player joined Room_${code} successfully`))
                            .catch(err => console.error("JoinRoom Error: ", err));
                    } else {
                        console.error("Invalid roomId or playerId:", code, playerId);
                    }
                })
                .catch(err => {
                    console.error("Connection Error: ", err);
                    setTimeout(startConnection, 2000);
                });
        }

        connection.on("SendQuestion", function (questionData) {
            console.log("Received question:", questionData);
            currentOrder = questionData.QuestionIndex;
            displayQuestion(questionData);
        });

        connection.on("EndQuiz", function (code) {
            console.log("Quiz ended for Room_" + code);
            window.location.href = `/EndGame?roomId=${code}&playerId=${playerId}`;
        });

        function displayQuestion(questionData) {
            const questionText = document.getElementById("questionText");
            const answerA = document.getElementById("answerA");
            const answerB = document.getElementById("answerB");
            const answerC = document.getElementById("answerC");
            const answerD = document.getElementById("answerD");
            const timerElement = document.getElementById("timer");
            const correctAnswerElement = document.getElementById("correctAnswer");
            const answerOptions = document.getElementById("answerOptions");
            const statusElement = document.getElementById("status");

            questionText.textContent = questionData.question.questionText;
            answerA.textContent = questionData.question.answerA;
            answerB.textContent = questionData.question.answerB;
            answerC.textContent = questionData.question.answerC;
            answerD.textContent = questionData.question.answerD;
            answerOptions.style.display = "block";
            correctAnswerElement.style.display = "none";
            statusElement.textContent = "";

            let timeLeft = questionData.question.timeLimit || 10;
            timerElement.textContent = `Time Left: ${timeLeft}s`;

            if (countdown) clearInterval(countdown);

            countdown = setInterval(() => {
                timeLeft--;
                timerElement.textContent = `Time Left: ${timeLeft}s`;

                if (timeLeft <= 0) {
                    clearInterval(countdown);
                    timerElement.textContent = "Time's up!";
                    disableAnswers();
                    showCorrectAnswer(questionData.question.answer);
                }
            }, 1000);

            document.querySelectorAll(".answer-btn").forEach(button => {
                button.disabled = false;
                button.classList.remove("btn-success", "btn-danger");
                button.onclick = () => {
                    const selectedAnswer = button.getAttribute("data-answer");
                    submitAnswer(selectedAnswer);
                    disableAnswers();
                };
            });
        }

        function disableAnswers() {
            document.querySelectorAll(".answer-btn").forEach(button => {
                button.disabled = true;
            });
        }

        function showCorrectAnswer(correctAnswer) {
            const correctAnswerElement = document.getElementById("correctAnswer");
            correctAnswerElement.textContent = `Correct Answer: ${correctAnswer}`;
            correctAnswerElement.style.display = "block";
        }

        function submitAnswer(selectedAnswer) {
            const statusElement = document.getElementById("status");
            statusElement.textContent = "Answer submitted: " + selectedAnswer;

            connection.invoke("SubmitAnswer", "@(code)", @(playerId), selectedAnswer, currentOrder)
                .catch(err => console.error("SubmitAnswer Error: ", err));
        }

        connection.onclose(() => {
            console.log("SignalR connection closed. Reconnecting...");
            startConnection();
        });

        startConnection();
    </script>

    <style>
        .card-body {
            font-size: 1.1rem;
        }

        #timer {
            margin-top: 1rem;
        }

        .answer-btn {
            text-align: left;
        }
    </style>
}
